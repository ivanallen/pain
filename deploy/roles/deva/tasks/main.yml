---

- name: deploy deva
  tags:
    - start
    - deva
    - start-deva
  vars:
    main_nodes_ips_with_port: "{% for host in groups['deva'] %}{{hostvars[host]['pain_node_default_ip']}}:{{listen_port}},{% endfor %}"
    gflags_: "{% for flag in gflags %}--{{ flag }}={{ gflags[flag] }} {% endfor %}"
  block:
    - name: debug
      debug:
        var: gflags
    - name: debug
      debug:
        var: pain_node_default_ip
    - name: copy files
      copy: src={{ playbook_dir }}/../output/bin/deva dest={{ ansible_user_dir }}/deployment/deva/ mode=0775
    - name: create working dir
      file: path={{ ansible_user_dir }}/deployment/deva/{{ listen_port }} state=directory
    - name: start deva
      shell:
        chdir: ./deployment/deva/{{ listen_port }}
        cmd: >
          start-stop-daemon --output $(pwd)/stdout.log --start --chdir $(pwd) --pidfile deva.pid --make-pidfile --background 
          --exec $(pwd)/../deva -- --rsm_listen_address={{ pain_node_default_ip }}:{{ listen_port }} --rsm_conf={{ main_nodes_ips_with_port }} {{ gflags_ }}
    - name: wait for deva to start
      wait_for:
        host: "{{ pain_node_default_ip }}"
        port: "{{ listen_port }}"
        delay: 5
        timeout: 60
        state: started
    - name: register to asura
      shell:
        chdir: ./deployment/deva/{{ listen_port }}
        cmd: >
          {{ ansible_user_dir }}/deployment/sad/sad asura register-deva --host={{ pain_node_default_ip }}:{{ hostvars[groups['asura'][0]]['listen_port'] }} --ip={{ pain_node_default_ip }} --port={{ listen_port }}
      register: register_output
    - name: debug
      debug:
        msg: "{{ register_output.stdout.split('\n') }}"

- name: stop deva
  tags:
    - stop
    - stop-deva
  block:
    - name: stop deva
      shell: 
        chdir: "{{ ansible_user_dir }}/deployment/deva/{{ listen_port }}"
        cmd: >
          start-stop-daemon --stop --pidfile deva.pid --remove-pidfile
      ignore_errors: yes


- name: status deva
  tags:
    - status
    - deva
    - status-deva
  block:
    - name: status deva
      shell: 
        chdir: ./deployment/deva/{{ listen_port }}
        cmd: |
          start-stop-daemon --status --pidfile deva.pid && exit_status=$? || exit_status=$?
          case "$exit_status" in
              0)
                  echo "Running"
                  ;;
              1)
                  echo "Stopped but pid existed"
                  ;;
              3)
                  echo "Stopped"
                  ;;
              *)
                  echo "Unknown exit status: $exit_status"
                  ;;
          esac
      register: output
    - debug:
        msg: "{{ output.stdout }}"

- name: clean deva
  tags:
    - clean
    - clean-deva
  block:
    - name: stop deva
      shell: 
        chdir: ./deployment/deva/{{ listen_port }}
        cmd: >
          start-stop-daemon --stop --pidfile deva.pid --remove-pidfile || true
    - name: remove working dir
      file: path=./deployment/deva/{{ listen_port }} state=absent
