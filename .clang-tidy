---
Checks:
  - '-*'
  - 'readability-avoid-const-params-in-decls'
  #- 'readability-avoid-nested-conditional-operator'
  - 'readability-avoid-return-with-void-value'
  - 'readability-avoid-unconditional-preprocessor-if'
  - 'readability-braces-around-statements'
  - 'readability-const-return-type'
  - 'readability-container-contains'
  - 'readability-container-data-pointer'
  - 'readability-container-size-empty'
  #- 'readability-convert-member-functions-to-static'
  - 'readability-delete-null-pointer'
  - 'readability-duplicate-include'
  - 'readability-else-after-return'
  - 'readability-enum-initial-value'
  #- 'readability-function-cognitive-complexity'
  - 'readability-function-size'
  #- 'readability-identifier-length'
  - 'readability-identifier-naming'
  - 'readability-implicit-bool-conversion'
  - 'readability-inconsistent-declaration-parameter-name'
  - 'readability-isolate-declaration'
  - 'readability-magic-numbers'
  - 'readability-make-member-function-const'
  #- 'readability-math-missing-parentheses'
  - 'readability-misleading-indentation'
  - 'readability-misplaced-array-index'
  #- 'readability-named-parameter'
  - 'readability-non-const-parameter'
  - 'readability-operators-representation'
  #- 'readability-qualified-auto'
  #- 'readability-redundant-access-specifiers'
  - 'readability-redundant-casting'
  - 'readability-redundant-control-flow'
  - 'readability-redundant-declaration'
  - 'readability-redundant-function-ptr-dereference'
  - 'readability-redundant-inline-specifier'
  - 'readability-redundant-member-init'
  - 'readability-redundant-preprocessor'
  - 'readability-redundant-smartptr-get'
  - 'readability-redundant-string-cstr'
  - 'readability-redundant-string-init'
  - 'readability-reference-to-constructed-temporary'
  - 'readability-simplify-boolean-expr'
  - 'readability-simplify-subscript-expr'
  #- 'readability-static-accessed-through-instance'
  #- 'readability-static-definition-in-anonymous-namespace'
  - 'readability-string-compare'
  - 'readability-suspicious-call-argument'
  - 'readability-uniqueptr-delete-release'
  - 'readability-uppercase-literal-suffix'
  #- 'readability-use-anyofallof'
  #- 'readability-use-std-min-max'
  #- 'modernize-avoid-c-arrays'
  - 'modernize-concat-nested-namespaces'
  - 'modernize-deprecated-headers'
  - 'modernize-deprecated-ios-base-aliases'
  #- 'modernize-loop-convert'
  - 'modernize-macro-to-enum'
  #- 'modernize-make-shared'
  - 'modernize-make-unique'
  #- 'modernize-min-max-use-initializer-list'
  - 'modernize-pass-by-value'
  #- 'modernize-raw-string-literal'
  #- 'modernize-redundant-void-arg'
  #- 'modernize-replace-auto-ptr'
  #- 'modernize-replace-disallow-copy-and-assign-macro'
  #- 'modernize-replace-random-shuffle'
  #- 'modernize-return-braced-init-list'
  #- 'modernize-shrink-to-fit'
  #- 'modernize-type-traits'
  #- 'modernize-unary-static-assert'
  #- 'modernize-use-auto'
  #- 'modernize-use-bool-literals'
  #- 'modernize-use-constraints'
  #- 'modernize-use-default-member-init'
  #- 'modernize-use-designated-initializers'
  - 'modernize-use-emplace'
  #- 'modernize-use-equals-default'
  #- 'modernize-use-equals-delete'
  - 'modernize-use-integer-sign-comparison'
  #- 'modernize-use-nodiscard'
  #- 'modernize-use-noexcept'
  - 'modernize-use-nullptr'
  - 'modernize-use-override'
  #- 'modernize-use-ranges'
  #- 'modernize-use-starts-ends-with'
  #- 'modernize-use-std-format'
  #- 'modernize-use-std-numbers'
  #- 'modernize-use-std-print'
  #- 'modernize-use-trailing-return-type'
  #- 'modernize-use-transparent-functors'
  #- 'modernize-use-uncaught-exceptions'
  - 'modernize-use-using'
  - 'cppcoreguidelines-avoid-capturing-lambda-coroutines'
  #- 'cppcoreguidelines-avoid-const-or-ref-data-members'
  #- 'cppcoreguidelines-avoid-do-while'
  - 'cppcoreguidelines-avoid-goto'
  #- 'cppcoreguidelines-avoid-non-const-global-variables'
  #- 'cppcoreguidelines-avoid-reference-coroutine-parameters'
  - 'cppcoreguidelines-init-variables'
  - 'cppcoreguidelines-interfaces-global-init'
  #- 'cppcoreguidelines-macro-usage'
  - 'cppcoreguidelines-misleading-capture-default-by-value'
  #- 'cppcoreguidelines-missing-std-forward'
  #- 'cppcoreguidelines-no-malloc'
  - 'cppcoreguidelines-no-suspend-with-lock'
  #- 'cppcoreguidelines-owning-memory'
  #- 'cppcoreguidelines-prefer-member-initializer'
  #- 'cppcoreguidelines-pro-bounds-array-to-pointer-decay'
  #- 'cppcoreguidelines-pro-bounds-constant-array-index'
  #- 'cppcoreguidelines-pro-bounds-pointer-arithmetic'
  - 'cppcoreguidelines-pro-type-const-cast'
  #- 'cppcoreguidelines-pro-type-cstyle-cast'
  #- 'cppcoreguidelines-pro-type-member-init'
  #- 'cppcoreguidelines-pro-type-reinterpret-cast'
  #- 'cppcoreguidelines-pro-type-static-cast-downcast'
  #- 'cppcoreguidelines-pro-type-union-access'
  #- 'cppcoreguidelines-pro-type-vararg'
  #- 'cppcoreguidelines-rvalue-reference-param-not-moved'
  - 'cppcoreguidelines-slicing'
  #- 'cppcoreguidelines-special-member-functions'
  - 'cppcoreguidelines-virtual-class-destructor'
CheckOptions:
  # 类名使用大驼峰式 (CamelCase)
  - key: readability-identifier-naming.ClassCase
    value: CamelCase

  # 结构体名使用大驼峰式或蛇形小写加 _t 后缀
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.StructIgnoredRegexp
    value: '^([a-z][a-z0-9]*)(_[a-z0-9]+)*_t$'

  # 函数名使用蛇形小写 (snake_case)
  - key: readability-identifier-naming.FunctionCase
    value: lower_case

  # 方法名使用小驼峰式 (camelCase)
  - key: readability-identifier-naming.MethodCase
    value: lower_case

  # 变量名使用蛇形小写
  - key: readability-identifier-naming.VariableCase
    value: lower_case

  - key: readability-identifier-naming.LocalConstantCase
    value: lower_case

  - key: readability-identifier-naming.LocalConstantCase
    value: lower_case

  # 成员变量添加 '_' 前缀并使用蛇形小写
  - key: readability-identifier-naming.MemberCase
    value: lower_case
  - key: readability-identifier-naming.PrivateMemberPrefix
    value: '_'
  - key: readability-identifier-naming.ConstantMemberCase
    value: lower_case

  # 常量使用 'k' 前缀和大驼峰式 (如 Google 风格)
  - key: readability-identifier-naming.ConstantCase
    value: UPPER_CASE

  - key: readability-identifier-naming.GlobalVariableCase
    value: lower_case
  - key: readability-identifier-naming.GlobalVariablePrefix
    value: 'g_'

  # 参数名使用蛇形小写
  - key: readability-identifier-naming.ParameterCase
    value: lower_case
  - key: readability-identifier-naming.ConstantParameterCase
    value: lower_case
  - key: readability-identifier-naming.ConstantPointerParameterCase
    value: lower_case

  # 忽略 'main' 函数的命名检查
  - key: readability-identifier-naming.FunctionIgnoredRegexp
    value: '^main$'

  - key: readability-identifier-naming.StaticVariableCase
    value: lower_case
  - key: readability-identifier-naming.StaticVariablePrefix
    value: 's_'

  - key: readability-identifier-naming.NamespaceCase
    value: lower_case

  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE

  ## 允许1个或2个下划线结尾的宏，用于内部使用
  - key: readability-identifier-naming.MacroDefinitionIgnoredRegexp
    value: '^([A-Z][A-Z0-9]*)(_[A-Z0-9]+)*_{1,2}$'

  - key: readability-identifier-naming.TemplateParameterCase
    value: CamelCase

  - key: readability-identifier-naming.UnionCase
    value: CamelCase

  - key: readability-identifier-naming.VirtualMethodCase
    value: lower_case

  - key: readability-identifier-naming.TypeAliasCase
    value: CamelCase

  - key: readability-identifier-naming.TypeAliasIgnoredRegexp
    value: '^([a-z][a-z0-9]*)(_[a-z0-9]+)*_t$'

  - key: readability-identifier-naming.EnumCase
    value: CamelCase

  - key: readability-identifier-naming.EnumConstantPrefix
    value: 'k'

  - key: readability-identifier-naming.EnumConstantCase
    value: CamelCase

ExtraArgsBefore:
  - '-Wno-unknown-warning-option'
  - '-ferror-limit=10'
